/*
    File:
        MainDlg.java
 *
    Revision:
        1.0.0.0
 *
    Description:
        DPGP parser main dialog.
 *
    Project:
        GeneAnalyzer 2.2
 *
    Copyright:
        (c) 2008. Sergej Nowoshilow, Biozentrum, Martinsried, Germany.
 */


package dpgp.gui;

import dpgp.DatasetBuilder;
import java.io.File;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import kernel.SettingsManager;

public class MainDlg extends javax.swing.JDialog
{
    public class Options
    {
        public File[] vma                      = null;
        public String[] specs                  = null;
        public String[] strains                = null;
        public int iCutoff                     = 0;
        public String strChromosome            = null;
        public File gff                        = null;
        public File fragfile                   = null;
        public HashMap<String, DatasetBuilder.Fragment> frags = null;
    };

    public static final String TITLE         = "DPGP Data import";

    private JPanel[] steps             = null;
    private int iStep                  = 0;
    private Step1Panel.Entry[] entries = null;
    private Options opt                = null;


    public MainDlg(SettingsManager sm)
    {
        super();
        this.setModal(true);
        initComponents();
        setLocationRelativeTo(null);
        steps = new JPanel[]{new Step1Panel(sm), new Step2Panel(sm)};
        for(JPanel p:steps)
            jpMain.add(p);
        steps[0].setVisible(true);
        jbBack.setEnabled(false);
    }

    public Options getImportOptions()
    {
        setVisible(true);
        return opt;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbBack = new javax.swing.JButton();
        jbNext = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();
        jpMain = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import DPGP data");
        setResizable(false);

        jbBack.setText("< Back");
        jbBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBackActionPerformed(evt);
            }
        });

        jbNext.setText("Next >");
        jbNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextActionPerformed(evt);
            }
        });

        jbClose.setText("Close");
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });

        jpMain.setLayout(new javax.swing.BoxLayout(jpMain, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(456, Short.MAX_VALUE)
                .addComponent(jbBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbNext)
                .addGap(38, 38, 38)
                .addComponent(jbClose)
                .addContainerGap())
            .addComponent(jpMain, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpMain, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbClose)
                    .addComponent(jbNext)
                    .addComponent(jbBack))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextActionPerformed
        switch(iStep)
        {
            // STEP 1: Get the names of the *.VMA files and the cutoff threshold.
            case 0:
                opt = new Options();
                // Chromosome.
                opt.strChromosome = ((Step1Panel)steps[0]).getChromosomeName();
                if(opt.strChromosome.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "Specify the chromosome", TITLE, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                // Cutoff threshold.
                opt.iCutoff = ((Step1Panel)steps[0]).getCutoff();
                if(opt.iCutoff==0)
                {
                    JOptionPane.showMessageDialog(null, "Specify the cutoff threshold", TITLE, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                // Entries.
                entries = ((Step1Panel)steps[0]).getEntries();
                if(entries==null)
                {
                    JOptionPane.showMessageDialog(null, "Specify the *.VMA files", TITLE, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                opt.vma = new File[entries.length];
                opt.specs = new String[entries.length];
                opt.strains = new String[entries.length];
                for(int i=0;i<entries.length;i++)
                {
                    opt.vma[i] = entries[i].file;
                    opt.specs[i] = entries[i].strSpecies;
                    opt.strains[i] = entries[i].strStrain;
                }
                break;
            // STEP 2: Create dataset.
            case 1:
                opt.gff = null;
                opt.frags = null;
                opt.fragfile = null;
                // Fragments type.
                Step2Panel p = (Step2Panel)steps[1];
                int iType = p.getFragmentsType();
                switch(iType)
                {
                    // GFF file.
                    case 1:
                        if(p.getGFFFilename().isEmpty())
                        {
                            JOptionPane.showMessageDialog(null, "Specify the *.GFF file", TITLE, JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        opt.gff = new File(p.getGFFFilename());
                        break;
                    // Fragments.
                    case 2:
                        HashMap<String, DatasetBuilder.Fragment> frags = p.getFragments();
                        if(frags==null)
                        {
                            JOptionPane.showMessageDialog(null, "Specify the fragments", TITLE, JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        opt.frags = frags;
                        break;
                    // Fragments file.
                    case 3:
                        if(p.getFragmentsFile().isEmpty())
                        {
                            JOptionPane.showMessageDialog(null,
                                          "Specify the fragments file",
                                          TITLE,
                                          JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        opt.fragfile = new File(p.getFragmentsFile());
                        break;
                }
                setVisible(false); 
                break;
        }
        jbBack.setEnabled(true);
        if(iStep<steps.length-1)
        {
            steps[iStep].setVisible(false);
            steps[iStep+1].setVisible(true);
        }
        iStep++;
        if(iStep==steps.length-1)
            jbNext.setText("Finish");
    }//GEN-LAST:event_jbNextActionPerformed

    private void jbBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBackActionPerformed
        jbNext.setEnabled(true);
        jbNext.setText("Next >");
        if(iStep<steps.length)
        {
            steps[iStep].setVisible(false);
            steps[iStep-1].setVisible(true);
        }
        iStep--;
        if(iStep==0)
            jbBack.setEnabled(false);
    }//GEN-LAST:event_jbBackActionPerformed

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        opt = null;
        setVisible(false);
}//GEN-LAST:event_jbCloseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbBack;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbNext;
    private javax.swing.JPanel jpMain;
    // End of variables declaration//GEN-END:variables
}
