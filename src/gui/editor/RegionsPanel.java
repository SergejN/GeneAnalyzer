/*
    File:
        RegionsPanel.java
 *
    Revision:
        1.0.0.1
 *
    Description:
        Displays a panel with gene regions.

 *
    Project:
        GeneAnalyzer 2.2
 *
    Copyright:
        (c) 2008. Sergej Nowoshilow, Biozentrum, Martinsried, Germany.
 */
package gui.editor;

import bio.gene.GeneEntry;
import bio.gene.GeneRegion;
import bio.gene.StrainEntry;
import gui.gene.AddGeneRegionDialog;
import java.awt.Cursor;
import java.util.Collections;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import kernel.Main;
import kernel.QualityChecker;


public class RegionsPanel extends javax.swing.JPanel
{
    private Vector<GeneRegion> regions = null;
    private GeneEntry ge = null;
    private EditorPanel ep = null;


    public RegionsPanel()
    {
        initComponents();        
    }

    public void editRegions(GeneEntry ge, EditorPanel ep)
    {
        regions = new Vector<GeneRegion>();
        this.ge = ge;
        StrainEntry se = ge.getStrainEntry(0);
        int nRegs = se.getRegionsCount();
        for(int i=0;i<nRegs;i++)
            regions.add(ge.getStrainEntry(0).getRegion(i));
        updateRegionsList();
        this.ep = ep;
    }
    
    private void updateRegionsList()
    {
        DefaultTableModel model = (DefaultTableModel)lvRegs.getModel();
        model.setRowCount(0);
        Collections.sort(regions);
        int nRegs = regions.size();
        for(int i=0;i<nRegs;i++)
        {
            GeneRegion reg = regions.get(i);
            model.addRow(new Object[]{reg.getType(), reg.getStart(), reg.getEnd()});
        }
        jbRemove.setEnabled(nRegs>0);
    }
    
    /**
     *  Checks the regions and returns true, only if the regions are ok.
     * 
     *  @return
     */
    private boolean checkRegions()
    {
        String strMsg = "";
        if(regions.get(0).getStart()>1)
            strMsg = "Unnamed sequence region before the first region";
        int nRegs = regions.size();
        for(int i=0;i<nRegs-1;i++)
        {
            GeneRegion r1 = regions.get(i);
            GeneRegion r2 = regions.get(i+1);
            if(r2.getStart()>r1.getEnd()+1)
            {
                if(!strMsg.isEmpty())
                    strMsg += "\n";
                strMsg += String.format("Gap between regions %d and %d", i+1, i+2);
            }
            if(r1.getEnd()>=r2.getStart())
            {
                if(!strMsg.isEmpty())
                    strMsg += "\n";
                strMsg += String.format("Overlap between regions %d and %d", i+1, i+2);
            }
        }
        if(regions.get(nRegs-1).getEnd()!=ge.getStrainEntry(0).getCompleteSequence().length())
        {
            if(!strMsg.isEmpty())
                strMsg += "\n";
            strMsg += "Unnamed sequence region after the last region";
        }
        if(!strMsg.isEmpty())
        {
            JOptionPane.showMessageDialog(this, strMsg, Main.APPTITLE, JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lvRegs = new javax.swing.JTable();
        jbAdd = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jbApply = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setFocusable(false);

        lvRegs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Start", "End"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lvRegs.setFocusable(false);
        lvRegs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lvRegsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lvRegs);

        jbAdd.setText("Add");
        jbAdd.setFocusable(false);
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddActionPerformed(evt);
            }
        });

        jbRemove.setText("Remove");
        jbRemove.setFocusable(false);
        jbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveActionPerformed(evt);
            }
        });

        jLabel1.setText("Click ESC to close.");
        jLabel1.setFocusable(false);

        jbApply.setText("Apply");
        jbApply.setFocusable(false);
        jbApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(jbApply, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(jbRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(292, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbApply))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveActionPerformed
        int i = lvRegs.getSelectedRow();
        if(i>-1)
        {
            regions.remove(i);
            updateRegionsList();
        }
}//GEN-LAST:event_jbRemoveActionPerformed

private void jbAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddActionPerformed
    GeneRegion r = (new AddGeneRegionDialog()).createGeneRegion();
    if(r!=null)
    {
        regions.add(r);
        updateRegionsList();
    }
}//GEN-LAST:event_jbAddActionPerformed

private void jbApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbApplyActionPerformed
    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    if(checkRegions())
    {
        int nStrains = ge.getStrainsCount();
        for(int i=0;i<nStrains;i++)
        {
            StrainEntry se = ge.getStrainEntry(i);
            String strSeq = se.getCompleteSequence();
            int nRegs = se.getRegionsCount();
            // Remove the regions.
            for(int n=nRegs-1;n>=0;n--)
                se.removeRegion(n);
            for(GeneRegion tmp:regions)
            {
                GeneRegion reg = new GeneRegion(tmp.getType());
                reg.setStart(tmp.getStart());
                reg.setEnd(tmp.getEnd());
                reg.setSequence(strSeq.substring(reg.getStart()-1, reg.getEnd()));
                reg.addProperty(QualityChecker.QUALITY_LEVEL, QualityChecker.QUALITY_LEVEL_0);
                reg.addProperty(QualityChecker.QUALITY_DESCRIPTION, "");
                se.addRegion(reg);
            }
        }
        ep.update();
    }
    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_jbApplyActionPerformed

private void lvRegsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lvRegsMouseClicked
    jbRemove.setEnabled(lvRegs.getSelectedRow()>-1);
}//GEN-LAST:event_lvRegsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbApply;
    private javax.swing.JButton jbRemove;
    private javax.swing.JTable lvRegs;
    // End of variables declaration//GEN-END:variables

}
