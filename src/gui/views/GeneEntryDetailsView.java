/*
    File:
        GeneEntryDetailsView.java
 *
    Revision:
        1.0.0.1
 *
    Description:
        GeneEntryDetailsView is displayed at the right hand side of the host-application
        window. It displays the gene entry details such as gene name, number of strains,
        populations and quality control notes.
 *
    Project:
        GeneAnalyzer 2.2
 *
    Copyright:
        (c) 2008. Sergej Nowoshilow, Biozentrum, Martinsried, Germany.
 */

package gui.views;

import plugin.classes.AGeneAnalyzerView;
import bio.gene.GeneEntry;
import bio.gene.GeneRegion;
import bio.gene.StrainEntry;
import javax.swing.table.DefaultTableModel;
import kernel.QualityChecker;


public class GeneEntryDetailsView extends AGeneAnalyzerView
{
    public GeneEntryDetailsView()
    {
        initComponents();
        reset();
    }
    
    public String getButtonName()
    {
        return "General";
    }
    
    public String getButtonHintText()
    {
        return "Displays general information about the gene entry";
    }

    public void displayGeneEntryInfo(GeneEntry ge)
    {
        if(ge==null)
        {
            reset();
            return;
        }
        String strName = ge.getCommonName();
        if(!ge.getAlias().isEmpty())
            strName += " ("+ge.getAlias()+")";
        jlGeneName.setText(strName);
        jlStrainsCount.setText(Integer.toString(ge.getStrainsCount()));
        DefaultTableModel model = (DefaultTableModel)lvPops.getModel();
        for(int i=model.getRowCount()-1;i>=0;i--)
            model.removeRow(i);
        String[] pops = ge.listPopulations();
        for(String s:pops)
        {
            int nCount = 0;
            for(int i=0;i<ge.getStrainsCount();i++)
                if(ge.getStrainEntry(i).belongsToPopulation(s))
                    nCount++;
            model.addRow(new Object[]{s, Integer.toString(nCount)});
        }
        // Quality.
        Integer quality = (Integer)ge.getProperty(QualityChecker.QUALITY_LEVEL);
        if(quality==QualityChecker.QUALITY_LEVEL_0)
        {
            jtaQuality.setText("No deficits");
        }
        else
        {
            StringBuffer content = new StringBuffer();
            // Gene entry.
            String strMsg = (String)ge.getProperty(QualityChecker.QUALITY_DESCRIPTION);
            if((Integer)ge.getProperty(QualityChecker.QUALITY_LEVEL)!=QualityChecker.QUALITY_LEVEL_0)
            {
                if(!strMsg.isEmpty())
                {
                    String[] tmp = strMsg.split(";");
                    for(String s:tmp)
                        content.append(s+"\n");
                }
            }
            // Strain entries.
            for(int i=0;i<ge.getStrainsCount();i++)
            {
                StrainEntry se = ge.getStrainEntry(i);
                strMsg = (String)se.getProperty(QualityChecker.QUALITY_DESCRIPTION);
                if((Integer)se.getProperty(QualityChecker.QUALITY_LEVEL)!=QualityChecker.QUALITY_LEVEL_0)
                {
                    content.append(String.format("\u2022Strain: %s (%s):\n",
                        se.getStrainName(), se.getSpeciesName()));
                    if(!strMsg.isEmpty())
                    {
                        String[] tmp = strMsg.split(";");
                        for(String s:tmp)
                            content.append("    "+s+"\n");
                    }
                }
                // Regions.
                for(int j=0;j<se.getRegionsCount();j++)
                {
                    GeneRegion reg = se.getRegion(j);
                    strMsg = (String)reg.getProperty(QualityChecker.QUALITY_DESCRIPTION);
                    if((Integer)reg.getProperty(QualityChecker.QUALITY_LEVEL)!=QualityChecker.QUALITY_LEVEL_0)
                    {
                        content.append(String.format("    \u2022Region: %s:\n", reg.getType()));
                        if(!strMsg.isEmpty())
                        {
                            String[] tmp = strMsg.split(";");
                            for(String s:tmp)
                                content.append("         "+s+"\n");
                        }
                    }
                }
            }
            jtaQuality.setText(content.toString());
        }
    }

    /**
     *  Resets the view.
     */
    private void reset()
    {
        jlGeneName.setText("-");
        jlStrainsCount.setText("-");
        jtaQuality.setText("");
        DefaultTableModel model = (DefaultTableModel)lvPops.getModel();
        for(int i=model.getRowCount()-1;i>=0;i--)
            model.removeRow(i);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlGeneName = new javax.swing.JLabel();
        jlStrainsCount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lvPops = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtaQuality = new javax.swing.JTextPane();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Gene entry details"));

        jlGeneName.setText("-");

        jlStrainsCount.setText("-");

        jLabel3.setText("Number of strains:");

        jLabel1.setText("Gene name:");

        jLabel2.setText("Populations:");

        lvPops.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Population", "Number of strains"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(lvPops);

        jLabel4.setText("Quality check");

        jtaQuality.setEditable(false);
        jScrollPane3.setViewportView(jtaQuality);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlGeneName)
                            .addComponent(jlStrainsCount)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jlGeneName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jlStrainsCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel jlGeneName;
    private javax.swing.JLabel jlStrainsCount;
    private javax.swing.JTextPane jtaQuality;
    private javax.swing.JTable lvPops;
    // End of variables declaration//GEN-END:variables

}
